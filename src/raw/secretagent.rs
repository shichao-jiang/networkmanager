//! # DBus interface proxy for: `org.freedesktop.NetworkManager.SecretAgent`
//!
//! This code was generated by `zbus-xmlgen` `3.1.1` from DBus introspection data.
//! Source: `org.freedesktop.NetworkManager.SecretAgent.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus_macros::proxy;

#[proxy(
    interface = "org.freedesktop.NetworkManager.SecretAgent",
    assume_defaults = true
)]
pub trait SecretAgent {
    /// CancelGetSecrets method
    fn cancel_get_secrets(
        &self,
        connection_path: &zbus::zvariant::ObjectPath<'_>,
        setting_name: &str,
    ) -> zbus::Result<()>;

    /// DeleteSecrets method
    fn delete_secrets(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
        connection_path: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// GetSecrets method
    fn get_secrets(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
        connection_path: &zbus::zvariant::ObjectPath<'_>,
        setting_name: &str,
        hints: &[&str],
        flags: u32,
    ) -> zbus::Result<
        std::collections::HashMap<
            String,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        >,
    >;

    /// SaveSecrets method
    fn save_secrets(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
        connection_path: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;
}
