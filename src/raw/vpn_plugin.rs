//! # DBus interface proxy for: `org.freedesktop.NetworkManager.VPN.Plugin`
//!
//! This code was generated by `zbus-xmlgen` `3.1.1` from DBus introspection data.
//! Source: `org.freedesktop.NetworkManager.VPN.Plugin.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus_macros::proxy;

#[proxy(
    interface = "org.freedesktop.NetworkManager.VPN.Plugin",
    assume_defaults = true
)]
pub trait VPNPlugin {
    /// Connect method
    fn connect(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
    ) -> zbus::Result<()>;

    /// ConnectInteractive method
    fn connect_interactive(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
        details: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Disconnect method
    fn disconnect(&self) -> zbus::Result<()>;

    /// NeedSecrets method
    fn need_secrets(
        &self,
        settings: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
    ) -> zbus::Result<String>;

    /// NewSecrets method
    fn new_secrets(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
    ) -> zbus::Result<()>;

    /// SetConfig method
    fn set_config(
        &self,
        config: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// SetFailure method
    fn set_failure(&self, reason: &str) -> zbus::Result<()>;

    /// SetIp4Config method
    fn set_ip4_config(
        &self,
        config: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// SetIp6Config method
    fn set_ip6_config(
        &self,
        config: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Config signal
    #[zbus(signal)]
    fn config(
        &self,
        config: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Failure signal
    #[zbus(signal)]
    fn failure(&self, reason: u32) -> zbus::Result<()>;

    /// Ip4Config signal
    #[zbus(signal)]
    fn ip4_config(
        &self,
        ip4config: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Ip6Config signal
    #[zbus(signal)]
    fn ip6_config(
        &self,
        ip6config: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// LoginBanner signal
    #[zbus(signal)]
    fn login_banner(&self, banner: &str) -> zbus::Result<()>;

    /// SecretsRequired signal
    #[zbus(signal)]
    fn secrets_required(&self, message: &str, secrets: Vec<&str>) -> zbus::Result<()>;

    /// StateChanged signal
    #[zbus(signal)]
    fn state_changed(&self, state: u32) -> zbus::Result<()>;

    /// State property
    #[zbus(property, name = "State")]
    fn state_property(&self) -> zbus::Result<u32>;
}
